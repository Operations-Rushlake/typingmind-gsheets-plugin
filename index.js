Â import express from "express";
import { google } from "googleapis";

const app = express();
app.use(express.json());

// --- OAUTH CLIENT ---
const oauth2Client = new google.auth.OAuth2(
Â  process.env.GOOGLE_CLIENT_ID,
Â  process.env.GOOGLE_CLIENT_SECRET,
Â  process.env.REDIRECT_URI || "https://plugins-server-xbmk.onrender.com/oauth2callback"
);

// Store tokens per user (for demo: in-memory, for production: database)
let userTokens = {};

// --- AUTH FLOW ---
app.get("/auth", (req, res) => {
Â  const authUrl = oauth2Client.generateAuthUrl({
Â  Â  access_type: "offline",
Â  Â  scope: [
Â  Â  Â  "https://www.googleapis.com/auth/drive.readonly",
Â  Â  Â  "https://www.googleapis.com/auth/spreadsheets"
Â  Â  ],
Â  });
Â  res.redirect(authUrl);
});

app.get("/oauth2callback", async (req, res) => {
Â  const { code } = req.query;
Â  const { tokens } = await oauth2Client.getToken(code);
Â  oauth2Client.setCredentials(tokens);

Â  // store user tokens (here: naive, should be per-user in DB)
Â  userTokens = tokens;

Â  res.send("âœ… Google Sheets connected! You can close this window.");
});

// Middleware to apply tokens
function requireAuth(req, res, next) {
Â  if (!userTokens.access_token) {
Â  Â  return res.status(401).send("Not logged in with Google");
Â  }
Â  oauth2Client.setCredentials(userTokens);
Â  next();
}

// --- NEW API ENDPOINTS WITH /api/ PREFIX ---
app.get("/api/sheets/list", requireAuth, async (req, res) => {
Â  try {
Â  Â  const drive = google.drive({ version: "v3", auth: oauth2Client });
Â  Â  const response = await drive.files.list({
Â  Â  Â  q: "mimeType='application/vnd.google-apps.spreadsheet'",
Â  Â  Â  fields: "files(id, name, owners)",
Â  Â  Â  pageSize: 20,
Â  Â  });
Â  Â  res.json(response.data.files);
Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  res.status(500).send("Error fetching sheets");
Â  }
});

app.get("/api/sheets/read", requireAuth, async (req, res) => {
Â  try {
Â  Â  const { sheetId, range } = req.query;
Â  Â  if (!sheetId) return res.status(400).send("sheetId required");

Â  Â  const sheets = google.sheets({ version: "v4", auth: oauth2Client });
Â  Â  const response = await sheets.spreadsheets.values.get({
Â  Â  Â  spreadsheetId: sheetId,
Â  Â  Â  range: range || "Sheet1!A1:D10",
Â  Â  });
Â  Â  res.json(response.data);
Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  res.status(500).send("Error reading sheet");
Â  }
});

app.post("/api/sheets/write", requireAuth, async (req, res) => {
Â  try {
Â  Â  const { sheetId, range, values } = req.body;
Â  Â  if (!sheetId || !range || !values) {
Â  Â  Â  return res.status(400).send("sheetId, range, and values are required");
Â  Â  }

Â  Â  const sheets = google.sheets({ version: "v4", auth: oauth2Client });
Â  Â  const response = await sheets.spreadsheets.values.update({
Â  Â  Â  spreadsheetId: sheetId,
Â  Â  Â  range,
Â  Â  Â  valueInputOption: "RAW",
Â  Â  Â  requestBody: { values },
Â  Â  });
Â  Â  res.json(response.data);
Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  res.status(500).send("Error writing sheet");
Â  }
});

// This new route will handle all other requests, including the root URL.
app.use((req, res, next) => {
    res.status(404).send("API endpoint not found. Please use a valid endpoint like /api/sheets/list.");
});

// --- SERVER START ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ğŸš€ Server running on ${PORT}`));